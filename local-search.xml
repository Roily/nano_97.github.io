<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jsNote</title>
    <link href="/2021/11/18/JavaScript/jsNote/"/>
    <url>/2021/11/18/JavaScript/jsNote/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jsBasic</tag>
      
      <tag>ES.x</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vueの修饰符</title>
    <link href="/2021/11/18/Vue/keyModifier/"/>
    <url>/2021/11/18/Vue/keyModifier/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>本篇文章是专门用来介绍vue的修饰符</li><li>包括了<strong>指令的修饰符</strong>,<strong>事件修饰符</strong>,<strong>按键修饰符</strong></li><li>了解常用的修饰符,使某些场景的开发变得更加简便</li></ul><h3 id="指令的修饰符"><a href="#指令的修饰符" class="headerlink" title="指令的修饰符"></a>指令的修饰符</h3><p>简介: 指令的修饰符包括了v-model的修饰符和v-bind的修饰符,这些都是一些比较常用的修饰符,有便于我们平常的开发</p><ul><li><p>v-model的修饰符<br>  v-model的修饰符分为3种[<strong>.lazy</strong>,<strong>.trim</strong>,<strong>.number</strong>]</p><ol><li><strong>.lazy</strong><blockquote><p>v-model在添加了.lazy修饰符之后只有等输入框失去焦点之后或者按下enter键才会显示输入的内容</p></blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;demoText&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">demoText</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure> <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/lazy.gif" alt=".lazy示意"></li><li><strong>.trim</strong><blockquote><p>trim修饰符会将双向绑定的内容的首尾空格进行去除,和字符串的trim方法效果是一致的,如果一直输入空格按钮,则绑定的值一直为’’(空字符串),中间的空格是无法清除的。</p></blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    // 如果输入demoText为 &#x27; abc &#x27; 则显示为:abc</span><br><span class="xml">    // 如果输入demoText为 &#x27;a bc &#x27; 则显示为:a bc</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;demoText&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">demoText</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><strong>.number</strong><blockquote><p>v-model在加了.number修饰符之后,会把输入的数值从字符串或其他类型转换为number类型</p></blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    // 如果输入demoText为 &#x27;&#x27;    则 typeText为string</span><br><span class="xml">    // 如果输入demoText为 &#x27;123&#x27; 则 typeText为number</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;demoText&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">typeText</span> &#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">import</span> &#123; defineComponent ,ref ,computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent(&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">let</span> demoText = ref(<span class="hljs-string">&#x27;&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">let</span> typeText = computed(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="javascript"><span class="xml">              <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> demoText.value</span></span><br><span class="javascript"><span class="xml">            &#125;)</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">                demoText,</span></span><br><span class="javascript"><span class="xml">                typeText</span></span><br><span class="javascript"><span class="xml">            &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml">&lt;script&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>v-bind的修饰符<br>v-bind的常用修饰符为.sync</p><ol><li><strong>.sync</strong><blockquote><p>v-bind的属性名之后添加.sync,可以通过$emit(‘update:属性名’, value)实现父子组件的数据双向绑定</p></blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span><br><span class="xml">        /* </span><br><span class="xml">            实际扩展为:</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">child-comp</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;label&quot;</span> @<span class="hljs-attr">update:label</span>=<span class="hljs-string">&quot;val =&gt; label = val&quot;</span> /&gt;</span></span><br><span class="xml">        */</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">child-comp</span> <span class="hljs-attr">:label.sync</span>=<span class="hljs-string">&quot;label&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">label</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">// childComp.vue</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demoChild&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;update:label&#x27;,&#x27;修改父组件的label&#x27;)&quot;</span>&gt;</span></span><br><span class="xml">            修改</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>当点击childComp.vue的button时,父组件的label则会改为 <em>修改父组件的label</em></p></blockquote></li></ol><blockquote><p>值的注意的是,vue3.0已经将.sync修饰符移除,与v-model进行了一个融合<br> <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/sync.png" alt=".sync修饰符3.0移除">  </p></blockquote></li></ul><h3 id="事件的修饰符"><a href="#事件的修饰符" class="headerlink" title="事件的修饰符"></a>事件的修饰符</h3><p>简介: 针对事件行为设计的修饰符,比如stopPropagation()[阻止冒泡],preventDefault()[阻止默认行为]等等…</p><ul><li>stop –&gt; event.stopPropagation()阻止事件冒泡<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阻止单击事件冒泡，当点击box2时就不会触发box1的点击事件，若不加则会触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>prevent -&gt; event.preventDefault(),阻止事件默认行为<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>capture –&gt; 来实现捕获触发事件的机制<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加事件侦听器时使用事件捕获模式，先执行外层盒子事件，再执行里面盒子事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;toDo&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>self –&gt; 实现只有点击当前元素时候，才会触发事件处理函数（只会阻止自己身上的冒泡行为，并不会阻止真正的冒泡）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 只当事件在该元素本身（而不是子元素）才去执行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;toDo&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>once –&gt; 只触发一次处理函数<figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> v-<span class="hljs-keyword">on</span>:click.once=<span class="hljs-string">&quot;toDo&quot;</span>&gt;&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure></li><li>passive –&gt; 对应 addEventListener 中的 passive 选项；表示它不会阻止事件的默认行为(通常来说，滚动页面的默认行为被阻止了，页面必须静止不动，但浏览器无法预先知道一个监听器会不会调用 preventDefault(),只有等滚动监听器执行完再去执行默认行为，而监听器执行是要耗时的，而且80%的滚动监听器是不会阻止默认行为的，所以浏览器白等，passive 监听器诞生了，可以在两个线程里同时执行监听器中的 JavaScript 代码和浏览器的默认行为了。）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="hljs-comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="hljs-comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:scroll.passive</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>.passive 修饰符尤其能够提升移动端的性能</strong><br>不要把 .passive 和 .prevent 一起使用,因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。passive 会告诉浏览器你不想阻止事件的默认行为</p></blockquote></li><li>事件修饰符的小技巧<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 修饰符可以串联，阻止默认事件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;toDo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="按键的修饰符"><a href="#按键的修饰符" class="headerlink" title="按键的修饰符"></a>按键的修饰符</h3><p>简介:通过键盘或鼠标的按键指定事件的触发方法(由于keyCode在Vue3.0废弃并且在一些高版本浏览器不支持,本文对keyCode形式的不作介绍)</p><ul><li>enter 回车键</li><li>tab</li><li>delete (捕获 “删除” 和 “退格” 键)</li><li>esc</li><li>space</li><li>up</li><li>down</li><li>left  (如果是鼠标就是左键)</li><li>right (如果是鼠标就是右键)</li><li>ctrl</li><li>alt</li><li>shift</li><li>meta  (MIT计算机键盘上的的一个特殊键)</li><li>middle(鼠标的中间滚轮键)</li></ul><blockquote><p>示例:<br>    <figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-comment">// 按下回车键触发search方法</span><br>&lt;<span class="hljs-keyword">input</span> type=<span class="hljs-string">&quot;text&quot;</span> v-<span class="hljs-keyword">on</span>:keyup.enter=<span class="hljs-string">&quot;search&quot;</span> /&gt;<br><br><span class="hljs-comment">// 按下鼠标中间滚轮键触发search方法</span><br>&lt;<span class="hljs-keyword">button</span> v-<span class="hljs-keyword">on</span>:cilck.middle=<span class="hljs-string">&quot;search&quot;</span>&gt; 查找 &lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="补充的修饰符"><a href="#补充的修饰符" class="headerlink" title="补充的修饰符"></a>补充的修饰符</h3><p>简介: 介绍了.exact修饰符和.native修饰符</p><ul><li>.exact修饰符<blockquote><p>作用: 精准的控制触发事件的按钮</p>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 只有按下enter键才可以触发<span class="hljs-keyword">search</span>方法,如果同时按下 alt + enter 键,则不会触发<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; v-<span class="hljs-keyword">on</span>:keyup.enter.exact=&quot;search&quot; /&gt;<br></code></pre></td></tr></table></figure></blockquote></li><li>.native修饰符<blockquote><p>作用: 将原生事件绑定到组件,组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">/* <br>    <br>    常用于一个纯icon组件,进行一个事件的绑定<br>*/<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">comp</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;consoleDetails&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>comp.vue<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>值的注意: 在vue3.0中,将.native修饰符也进行了废弃,如果需要达到.native的修饰符的方法则不能将绑定在组件标签上的方法注册进emits选项中(或者defineEmits([]))</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue2</tag>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的基础搭建</title>
    <link href="/2021/11/18/hexo/hexoCreate/"/>
    <url>/2021/11/18/hexo/hexoCreate/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><ul><li>风一般的速度<br>Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 </li><li>流畅的撰写<br>支持GitHub Flavored Markdown和所有Octopress的插件。 </li><li>扩展性<br>Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less.</li></ul><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><ul><li>所需环境<ul><li><a href="http://nodejs.cn/api/" title="Nodejsの中文镜像网站">Node.js</a></li><li><a href="https://git-scm.com/" title="git官网">git</a></li></ul></li><li>所需工具<ul><li><a href="https://github.com/" title="最大的同性交友网站">github</a></li><li><a href="https://hexo.io/zh-cn/" title="hexo中文官网">hexo</a></li></ul></li></ul><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket.png" />  <font size=5 face='微软雅黑' color="#1f87dd" style="font-weight:700;"> fist-step </font></div><ul class="nano-ul-flex">  <li>    <div >安装hexo脚手架</div>    <div class="nano-pointer">npm install -g hexo-cli</div>    <hr />  </li>   <li>    <div >初始化hexo文件夹</div>    <div class="nano-pointer">hexo init (初始化hexo)</div>    <div class="nano-pointer">npm install</div>    <hr />    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-step1.png"/>    <div class="nano-tips"><span>Tips:</span> 如果出现报错,一般都是node版本过低导致,升级一下node版本就可以了(博主的node版本是v14.18.1)</div>    <hr />  </li>  <li>    <div >本地启动hexo</div>    <div class="nano-pointer">hexo g (生成hexo)</div>    <div class="nano-pointer">hexo s (启动本地服务器,这一步之后就可以通过http://localhost:4000 查看)</div>    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-step2.png"/>    <div>&nbsp;</div>    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-step3.png"/>    <div class="nano-success">    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    这样就暂时先完成了本地博客的环境搭建啦~</div>    <div class="nano-tips"><span>Tips:</span> 如果出现端口占用问题可以输入      <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer">hexo s -p 41</font>      暂时切换端口    </div>    <hr />  </li></ul> <div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket.png">  <font size=5 face='微软雅黑' color="#1f87dd" style="font-weight:700;"> twice-step </font></div><ul class="nano-ul-flex">  <li>    <a href="https://github.com/">创建github账号</a>  </li>  <li>   <span>创建一个新的github仓库</span>   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/github-create-1.png" />   <hr />   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/github-create-2.png" />    <hr />    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/github-create-3.png" />    <div class="nano-success">      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    这样就完成了github的环境配置了~</div>  </li></ul><div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket.png" />  <font size=5 face='微软雅黑' color="#1f87dd" style="font-weight:700;"> third-step </font></div><ul class="nano-ul-flex">  <li>    <div >配置本地hexo部署到GitHub的文件</div>    <div>      编辑根目录下_config.yml文件,查找并切换到deploy字段位置,如图进行编辑:    </div>    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/push-hexo1.png" />    <div class="nano-pd">      保存后安装扩展: <span class="nano-pointer">npm install hexo-deployer-git --save </span>      </div>    <div class="nano-tips"><span>Tips:</span> hexo的语法规定 <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> : </font>后面      <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer">必须有一个空格</font>    </div>    <hr />  </li>  <li>    <div >配置SSH Key 到GitHub</div>    <div>      <div>在Git Bash中输入: <span class="nano-pointer">ssh-keygen -t rsa -C "你的github邮箱号" </span> </div>      <div>之后按三下回车出现以下内容</div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-1.png" />    </div>    <hr />    <div>      <div>找到.ssh文件夹，并打开其中的id_rsa.pub文件，复制里面的内容</div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-2.png" />    </div>    <hr />    <div>      <div>之后按下面图片步骤执行</div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-3.png" />      <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-4.png" />       <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-5.png" />      <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-6.png" />      <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-7.png" />      <hr/>      <div>此时在git bush中输入 <span class="nano-pointer">ssh -T git@github.com<span></div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-8.png" />      <div class="nano-success">      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    如果出现了以上语句,则说明设置成功~</div>    </div>    <hr />  </li>   <li>    <div >推送本地hexo 到GitHub</div>    <div>      <div>在Git Bash中设置用户信息:</div>      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-1.png" />      <hr />      <div>编辑根目录下_config.yml文件,查找并切换到url字段位置,如图进行编辑:</div>      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-2.png" />      <div class="nano-tips"><span>Tips:</span>  <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> 配置之后,初次上传就可以有样式了~ </font>      </div>      <hr />    </div>  </li></ul> <h2 id="搭建完成"><a href="#搭建完成" class="headerlink" title="搭建完成"></a>搭建完成</h2><div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket-succes.png" />  <font size=5 face='微软雅黑' color="red" style="font-weight:700;"> last-step </font></div><ul class="nano-ul-flex">  <li>    输入 <span class="nano-pointer">hexo d</span> 指令推送到远端    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-5.png">    <div class="nano-tips"><span>Tips:</span>  <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> 网络原因可能会推送不成功,多试几下就好了~ </font>    </div>    <hr />  </li>   <li>    推送成功!    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-3.png">    <hr />    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-7.jpg">     <div class="nano-tips"><span>Tips:</span>  <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> 因为picGo一直推不上去pc端的界面截图,所以展示了移动端的效果~ </font>    </div>     <hr />  </li>  <div class="nano-success">    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    这样就完成了博客的搭建与上传~</div></ul> <h2 id="最后の一些话"><a href="#最后の一些话" class="headerlink" title="最后の一些话"></a>最后の一些话</h2><ul><li><p>附上一些其它常用指令 <br/></p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/instruct-hexo.png" /></li><li><p>其它念叨 <br/></p><ul><li>之后也会陆续推出使用picgo搭配gitee做的图床教程,主要是为了减少静态资源的体积,本文的所有图片均来自gitee创建的图床~</li><li>一开始不用gitee而选择github的原因是因为gitee的pages服务需要人工审核,审了我蛮久的,github不需要审核,就是需要科学上网,所以gitee也是可以做博客的,有兴趣的同学可以自己尝试一下~</li><li>hexo还有主题这些,后面也会出一些教程,毕竟我也才开始弄hexo,也不是很会,可能只会写一些很浅显的东西- -</li><li>纪念第一篇博文,完结撒花,我去推了 2021-11-26</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexoの搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
