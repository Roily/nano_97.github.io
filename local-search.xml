<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fluid主题配置Valine评论系统</title>
    <link href="/2021/12/15/hexo/hexoComment/"/>
    <url>/2021/12/15/hexo/hexoComment/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="code-wrapper"><pre><code>本文主要用来介绍如何在Fluid主题中博客添加Valine评论系统</code></pre></div><h3 id="Valine优点"><a href="#Valine优点" class="headerlink" title="Valine优点"></a>Valine优点</h3><p>其实Fluid主题内置了很多评论插件,比如<code>utterances</code>,<code>valine</code>等等,选择valine的原因如下:</p><ul><li><p>无后端实现</p></li><li><p>高速，使用国内后端云服务提供商 LeanCloud 提供的存储服务</p></li><li><p>开源，自定义程度高</p></li><li><p>支持邮件通知</p></li><li><p>支持验证码</p></li><li><p>支持 Markdown</p></li></ul><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><ol><li>注册Leancloud</li></ol><p>Valine作为一款第三方的评论系统，评论数据都储存在Leancloud上，所以第一步我们要去 leancloud官网：<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a> 注册一个账户，注册完成后现在需要实名认证后才可以创建应用<br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment.png" alt="注册并实名Leancloud账号" title="注册并实名Leancloud账号"><br>2. 创建应用</p><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment-2.png" alt="创建应用" title="创建应用"></p><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment-3.png" alt="创建应用" title="创建应用"></p><ol start="3"><li>配置应用</li></ol><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment-4.png" alt="配置应用" title="配置应用"></p><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment-5.png" alt="配置应用" title="配置应用"></p><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment-6.png" alt="配置应用" title="配置应用"></p><ol start="4"><li><p>配置_config.fluid.yml</p><ol><li><p>在文件中查找<code>Comments</code>关键字,进行下面配置</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 评论插件# Comment plugincomments:    enable: true    # 指定的插件，需要同时设置对应插件的必要参数    # The specified plugin needs to set the necessary parameters at the same time    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis    type: valine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>在文件中查找<code>valine</code>关键字,进行下面配置</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">valine:appId: 填写刚才在Leancloud创建的应用的appIdappKey: 填写刚才在Leancloud创建的应用的appKeypath: window.location.pathname # 当前文章页路径，用于区分不同的文章页，以保证正确读取该文章页下的评论列表placeholder:  吐槽一哈!!!! # 占位符avatar: &#39;retro&#39; # Gravatar 头像展示方式meta: [&#39;nick&#39;, &#39;mail&#39;, &#39;link&#39;]  # 评论者相关属性requiredFields: []pageSize: 10 # 评论列表分页，每页条数lang: &#39;zh-CN&#39; # zh-CN | zh-TW | en | jahighlight: false # 代码是否高亮recordIP: false # 是否记录评论者IPserverURLs: &#39;&#39; # REST API 服务器地址，国际版不填emojiCDN:emojiMaps:enableQQ: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol></li></ol><h3 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h3><div class="code-wrapper"><pre><code>配置完成之后重启hexo,就可以看到效果~</code></pre></div><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment-7.png" alt="完成配置" title="完成配置"></p><h3 id="删除评论数据"><a href="#删除评论数据" class="headerlink" title="删除评论数据"></a>删除评论数据</h3><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-comment-8.png" alt="删除评论数据" title="删除评论数据"></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>hexo主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题配置</title>
    <link href="/2021/12/15/hexo/fluidOptions/"/>
    <url>/2021/12/15/hexo/fluidOptions/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="code-wrapper"><pre><code>之前介绍了如何使用Fluid的主题,这篇将继续深入如何去使用Fluid。</code></pre></div><h3 id="基础目录结构"><a href="#基础目录结构" class="headerlink" title="基础目录结构"></a>基础目录结构</h3><ol><li>使用<code>hexo n 文件名称</code>创建一个md文档,用来创作博客文章,进入md文档后,基础结构展示如下: <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">---title: 使用Hexo搭建博客（基础版） # 博客文章标题date: 2021-12-15 01:47:44  # 文章编写日期index_img: https:&#x2F;&#x2F;gitee.com&#x2F;roily&#x2F;nano-piture-bed&#x2F;raw&#x2F;master&#x2F;img&#x2F;fluid-hexo.png # 缩略图categories:- hexo博客搭建 # 分类tags: # 标签- hexo- github---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol><h3 id="常用基础配置"><a href="#常用基础配置" class="headerlink" title="常用基础配置"></a>常用基础配置</h3><p>Flui主题自身内置了很多插件,当我们想美化自己的博客时,可以在<code>_config.fluid.yml</code>文件下,通过一些配置去实现,非常的简便。接下来就介绍一些常用配置的设置</p><ol><li><p>favicon<br> 通过设置<code>favicon</code>和<code>apple_touch_icon</code>来设置浏览器标签图标,可以使用连接资源,也可以使用本地资源路径</p><p> <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-options-1.png" alt="fluid主题设置" title="fluid主题设置"></p><p> <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-options-2.png" alt="fluid主题设置" title="fluid主题设置"></p></li><li><p>打字机效果</p> <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">fun_features:# 为 subtitle 添加打字机效果# Typing animation for subtitletyping:    enable: true# 打印速度，数字越大越慢# Typing speed, the larger the number, the slower    typeSpeed: 70# 游标字符# Cursor character    cursorChar: &quot;_&quot;# 是否循环播放效果# If true, loop animation    loop: false# 为文章内容中的标题添加锚图标 # Add an anchor icon to the title on the post page<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>颜色的修改</p> <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">color:    # body 背景色    # Color of body background    body_bg_color: &quot;#eee&quot;    # 暗色模式下的 body 背景色，下同    # Color in dark mode, the same below    body_bg_color_dark: &quot;#181c27&quot;    # 顶部菜单背景色    # Color of navigation bar background    navbar_bg_color: &quot;#2f4154&quot;    navbar_bg_color_dark: &quot;#1f3144&quot;    # 顶部菜单字体色    # Color of navigation bar text    navbar_text_color: &quot;#fff&quot;    navbar_text_color_dark: &quot;#d0d0d0&quot;    # 全局字体色    # Color of global text    text_color: &quot;#3c4858&quot;    text_color_dark: &quot;#c4c6c9&quot;    # 全局次级字体色（摘要、简介等位置）    # Color of global secondary text (excerpt, introduction, etc.)    sec_text_color: &quot;#718096&quot;    sec_text_color_dark: &quot;#a7a9ad&quot;    # 文章正文字体色    # Color of post text    post_text_color: &quot;#2c3e50&quot;    post_text_color_dark: &quot;#c4c6c9&quot;    # 文章正文字体色（h1 h2 h3...）    # Color of Article heading (h1 h2 h3...)    post_heading_color: &quot;#1a202c&quot;    post_heading_color_dark: &quot;#c4c6c9&quot;    # 文章超链接字体色    # Color of post link    post_link_color: &quot;#0366d6&quot;    post_link_color_dark: &quot;#1589e9&quot;    # 超链接悬浮时字体色    # Color of link when hovering    link_hover_color: &quot;#30a9de&quot;    link_hover_color_dark: &quot;#30a9de&quot;    # 超链接悬浮背景色    # Color of link background when hovering    link_hover_bg_color: &quot;#f8f9fa&quot;    link_hover_bg_color_dark: &quot;#364151&quot;    # 主面板背景色    # Color of main board    board_color: &quot;#fff&quot;    board_color_dark: &quot;#252d38&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>搜索功能</p> <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件# Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index filessearch:    enable: true  # 将这个打开就可以实现站内搜索,默认自动打开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>footer</p> <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">footer:# 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题# HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more peoplecontent: &#39;&lt;div&gt;这里用来设置页面底部文字展示,支持HTML&lt;&#x2F;div&gt;&#39;# 展示网站的 PV、UV 统计数# Display website PV and UV statisticsstatistics:    enable: true# 统计数据来源，使用 leancloud 需要设置 &#96;web_analytics: leancloud&#96; 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常# Data source. If use leancloud, you need to set the parameter in &#96;web_analytics: leancloud&#96;# Options: busuanzi | leancloudsource: &quot;busuanzi&quot;# 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同# Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same belowpv_format: &quot;总访问量 &#123;&#125; 次&quot;uv_format: &quot;总访客数 &#123;&#125; 人&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="config-yml的一些设置"><a href="#config-yml的一些设置" class="headerlink" title="_config.yml的一些设置"></a>_config.yml的一些设置</h3> <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># Sitetitle: 博客主题名称subtitle: &#39;副标题&#39;description: &#39;博客描述&#39;keywords: &#39;搜索关键词&#39;author: 作者名称language: zh-CN  # 语言timezone: &#39;Asia&#x2F;Shanghai&#39;   # 时区设置   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果需要更换banner图片却又找不到合适的图片该怎么办?<br>兄弟莫慌~<br>附上官方链接: <a href="https://wallhaven.cc/">https://wallhaven.cc/</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>hexo主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于gitee的PicGo的搭建</title>
    <link href="/2021/12/13/hexo/picGo/"/>
    <url>/2021/12/13/hexo/picGo/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  想着做一个图床,方便博客的图片管理以及减少静态资源的占用量</p><h3 id="PicGo介绍"><a href="#PicGo介绍" class="headerlink" title="PicGo介绍"></a>PicGo介绍</h3><blockquote><p>一个用于快速上传图片并获取图片 URL 链接的工具</p></blockquote><ul><li>支持拖拽图片上传</li><li>支持快捷键上传剪贴板里第一张图片</li><li>Windows 和 macOS 支持右键图片文件通过菜单上传 (v2.1.0+)</li><li>上传图片后自动复制链接到剪贴板</li><li>支持自定义复制到剪贴板的链接格式</li><li>支持修改快捷键，默认快速上传快捷键：command+shift+p（macOS）| control+shift+p（Windows\Linux)</li><li>支持插件系统，已有插件支持 Gitee、青云等第三方图床</li><li>更多第三方插件。</li><li>支持通过发送 HTTP 请求调用 PicGo 上传（v2.2.0+)</li></ul><h3 id="准备搭建"><a href="#准备搭建" class="headerlink" title="准备搭建"></a>准备搭建</h3><blockquote><p>环境准备: </p></blockquote><ul><li><a href="https://git-scm.com/">git</a></li><li><a href="https://gitee.com/">gitee</a></li><li><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a></li></ul><h3 id="Gitee准备"><a href="#Gitee准备" class="headerlink" title="Gitee准备"></a>Gitee准备</h3><ol><li>注册<a href="https://gitee.com/login">gitee</a>账号(默认都安装了git,这里就不介绍了)  </li></ol><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-login-1.png" alt="gitee注册界面" title="gitee注册步骤一"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-login-2.png" alt="gitee注册界面" title="gitee注册步骤二"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-login-3.png" alt="gitee注册界面" title="gitee注册步骤三"></p><ol start="2"><li>创建仓库</li></ol><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-create-store-1.png" alt="gitee新建仓库界面" title="gitee新建仓库步骤一"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-create-store-2.png" alt="gitee新建仓库界面" title="gitee新建仓库步骤二"></p><ol start="3"><li>配置私人令牌</li></ol><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-picgo-set-1.png" alt="gitee配置私人令牌" title="gitee配置私人令牌步骤一"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-picgo-set-2.png" alt="gitee配置私人令牌" title="gitee配置私人令牌步骤二"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-picgo-set-3.png" alt="gitee配置私人令牌" title="gitee配置私人令牌步骤三"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-picgo-set-4.png" alt="gitee配置私人令牌" title="gitee配置私人令牌步骤四"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-picgo-set-5.png" alt="gitee配置私人令牌" title="gitee配置私人令牌步骤五"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/gitee-picgo-set-6.png" alt="gitee配置私人令牌" title="gitee配置私人令牌步骤六"></p><h3 id="PicGo准备"><a href="#PicGo准备" class="headerlink" title="PicGo准备"></a>PicGo准备</h3><ol><li>点击进入下载地址连接(<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a>)</li></ol><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-pack.png" alt="下载对应的PicGo安装包" title="下载对应的PicGo安装包"></p><blockquote><p><strong>Tips:</strong> 选择对应的下载版本,建议不要用beta版本</p></blockquote><ol start="2"><li><p><strong>下载成功后一直下一步安装即可。</strong></p></li><li><p>PicGo配置( <strong>安装成功后</strong>)</p></li></ol><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-1.png" alt="PicGo配置" title="PicGo配置步骤一"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-2.png" alt="PicGo配置" title="PicGo配置步骤二"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-3.png" alt="PicGo配置" title="PicGo配置步骤三"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-4.png" alt="PicGo配置" title="PicGo配置步骤四"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-5.png" alt="PicGo配置" title="PicGo配置步骤五"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-6.png" alt="PicGo配置" title="PicGo配置步骤六"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-7.png" alt="PicGo配置" title="PicGo配置步骤七"><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-setting-8.png" alt="PicGo配置" title="PicGo配置步骤八"></p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><blockquote><p>示例链接: <a href="https://gitee.com/roily/test-pic-bed/raw/master/img/test033.png">https://gitee.com/roily/test-pic-bed/raw/master/img/test033.png</a></p></blockquote><ul><li>一些需要注意的问题:<ol><li>当使用图床的url后,在微信打开无法显示,应该是微信做了某些限制,手机浏览器和钉钉内部打开是可以的。<br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/picgo-waring.jpg" alt="PicGo问题" title="PicGo问题"></li><li>为什么不使用github做为图床仓库?<br>因为github在国内访问速度较慢,所以没有考虑,github也是可以做图床的。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>picGo</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid配置使用</title>
    <link href="/2021/12/10/hexo/hexoFluid/"/>
    <url>/2021/12/10/hexo/hexoFluid/</url>
    
    <content type="html"><![CDATA[<h3 id="Fluid介绍"><a href="#Fluid介绍" class="headerlink" title="Fluid介绍"></a>Fluid介绍</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 是基于 Hexo 的一款 Material Design 风格的主题</p><ul><li><p>优势<br>1.设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；<br>2.提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；<br>3.响应式页面，适配手机、平板等设备；<br>4.为数不多内置支持 LaTeX 语法公式的主题。</p></li><li><p>特性<br>1.图片懒加载<br>2.自定义代码高亮方案<br>3.内置多语言<br>4.内置多款评论插件<br>5.外部覆盖配置<br>6.静态资源配置<br>7.文章搜索<br>8.页脚备案信息<br>9.网页访问统计<br>10.支持 LaTeX 数学公式<br>11.音乐播放器</p><blockquote><p><strong>Tips:</strong><br>  Fluid主题github仓库<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a><br>  hexo还有很多主题,具体可以查看<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3></li><li><p>方法1(推荐): Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令</p><ol><li><p>输入指令</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-theme-fluid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fuild-save.png" alt="Fluid版本下载" title="Fluid版本下载"></p></li><li><p>在与<code>_config.yml</code>文件平级的目录下,新建文件<code>_config.fluid.yml</code><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fuild-create-1.png" alt="创建Fluid配置文件" title="创建Fluid配置文件"></p></li><li><p>创建文件后,打开Fluid的github仓库地址: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a>,进入仓库后点击打开Fluid仓库中的<code>_config.yml</code>文件<br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/Fluid-Change-1.png" alt="打开_config.yml文件" title="打开_config.yml文件"></p></li><li><p>打开后,复制全部代码,粘贴入刚才创建的<code>_config.fluid.yml</code>文件中<br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/Fluid-Change-2.png" alt="复制_config.yml文件" title="复制config.yml文件"></p></li><li><p>粘贴成功后,点击<code>_config.yml</code>文件,点击搜索<code>theme</code>关键字,将之前的默认主题landscape换成<code>fluid</code><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/Fluid-Change-3.png" alt="更换fluid主题" title="更换fluid主题"></p></li></ol><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">最后执行:    hexo g    hexo s    就可以本地运行打开查看已经配置好的fluid主题~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/Fluid-Change-4.png" alt="完成更换fluid主题" title="完成更换fluid主题"></p></li><li><p>方法2:</p><ol><li>进入github仓库下载最新 release 版本解压到themes目录并将解压出的文件夹重命名为 fluid，最后将整个fluid拷贝至脚手架的themes文件夹内</li></ol><p>  <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-action2-1.png" alt="下载最新release压缩包" title="下载最新release压缩包"></p><p>  <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-action2-2.png" alt="重命名release压缩包" title="重命名release压缩包"></p><p>  <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-action2-3.png" alt="放置release压缩包" title="放置release压缩包"></p><ol start="2"><li>完成后同样需要将<code>_config.yml</code>文件的<code>theme</code>关键字,更换成<code>fluid</code><br><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/Fluid-Change-3.png" alt="更换fluid主题" title="更换fluid主题"><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">最后执行:  hexo g  hexo s  同方法1一样可以本地运行打开查看已经配置好的fluid主题~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol><p>  <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/Fluid-Change-4.png" alt="完成更换fluid主题" title="完成更换fluid主题"></p></li></ul><h3 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h3><blockquote><p>在使用方法2完成了主题更换的前提下,我们之后如果要在主题上进行修改,每次修改都需要到/themes/fluid下修改主题的<code>_config.yml</code>文件，这样特别麻烦，并且在版本更新时，都要注意怕被新的<code>_config.yml</code>文件替换掉，又回滚到了初始的代码，所以官方也建议将主题的<code>_config.yml</code>文件复制一份重命名为<code>_config.fluid.yml</code>文件到Hexo脚手架的根目录下，和<code>_config.yml</code>文件并列。这样，在官方更新版本时，直接覆盖.themes/fluid下的文件就可以了，不会影响到<code>_config.fluid.yml</code>文件</p></blockquote><p>  <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/fluid-action2-4.png" alt="备份fluid主题文件" title="备份fluid主题文件"></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>hexo主题</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsNotetest</title>
    <link href="/2021/11/18/JavaScript/jsNote/"/>
    <url>/2021/11/18/JavaScript/jsNote/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jsBasic</tag>
      
      <tag>ES.x</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vueの修饰符</title>
    <link href="/2021/11/18/Vue/keyModifier/"/>
    <url>/2021/11/18/Vue/keyModifier/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>本篇文章是专门用来介绍vue的修饰符</li><li>包括了<strong>指令的修饰符</strong>,<strong>事件修饰符</strong>,<strong>按键修饰符</strong>,<strong>其它修饰符</strong></li><li>了解常用的修饰符,使某些场景的开发变得更加简便</li></ul><h3 id="指令的修饰符"><a href="#指令的修饰符" class="headerlink" title="指令的修饰符"></a>指令的修饰符</h3><p>简介: 指令的修饰符包括了<code>v-model</code>的修饰符和<code>v-bind</code>的修饰符,这些都是一些比较常用的修饰符,有便于我们平常的开发</p><ul><li><p>v-model的修饰符<br>  <code>v-model</code>的修饰符分为3种<code>.lazy,.trim,.number</code></p><ol><li><strong>.lazy</strong><blockquote><p><code>v-model</code>在添加了<code>.lazy</code>修饰符之后只有等输入框失去焦点之后或者按下enter键才会显示输入的内容</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;    &lt;input v-model.lazy&#x3D;&quot;demoText&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;    &lt;h1&gt;&#123;&#123; demoText &#125;&#125;&lt;&#x2F;h1&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div> <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/lazy.gif" alt=".lazy示意"></li><li><strong>.trim</strong><blockquote><p><code>.trim</code>修饰符会将双向绑定的内容的首尾空格进行去除,和字符串的<code>trim</code>方法效果是一致的,如果一直输入空格按钮,则绑定的值一直为<code>&#39;&#39;(空字符串)</code>,中间的空格是无法清除的。</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;    &#x2F;&#x2F; 如果输入demoText为 &#39; abc &#39; 则显示为:abc    &#x2F;&#x2F; 如果输入demoText为 &#39;a bc &#39; 则显示为:a bc    &lt;input v-model.trim&#x3D;&quot;demoText&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;    &lt;h1&gt;&#123;&#123; demoText &#125;&#125;&lt;&#x2F;h1&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><strong>.number</strong><blockquote><p><code>v-model</code>在加了<code>.number</code>修饰符之后,会把输入的数值从字符串或其他类型转换为number类型</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;    &#x2F;&#x2F; 如果输入demoText为 &#39;&#39;    则 typeText为string    &#x2F;&#x2F; 如果输入demoText为 &#39;123&#39; 则 typeText为number    &lt;input v-model.number&#x3D;&quot;demoText&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;    &lt;h1&gt; &#123;&#123; typeText &#125;&#125; &lt;&#x2F;h1&gt;&lt;&#x2F;template&gt;&lt;script&gt;    import &#123; defineComponent ,ref ,computed&#125; from &#39;vue&#39;    export default defineComponent(&#123;        setup()&#123;            let demoText &#x3D; ref(&#39;&#39;)            let typeText &#x3D; computed(()&#x3D;&gt;&#123;              return typeof demoText.value            &#125;)            return &#123;                demoText,                typeText            &#125;        &#125;    &#125;)&lt;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol></li><li><p>v-bind的修饰符<br><code>v-bind</code>的常用修饰符为<code>.sync</code></p><ol><li><strong>.sync</strong><blockquote><p><code>v-bind</code>的属性名之后添加<code>.sync</code>,可以通过<code>$emit(&#39;update:属性名&#39;, value)</code>实现父子组件的数据双向绑定</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;    &lt;div class&#x3D;&quot;demo&quot;&gt;        &#x2F;*             实际扩展为:            &lt;child-comp :label&#x3D;&quot;label&quot; @update:label&#x3D;&quot;val &#x3D;&gt; label &#x3D; val&quot; &#x2F;&gt;        *&#x2F;        &lt;child-comp :label.sync&#x3D;&quot;label&quot; &#x2F;&gt;        &lt;div&gt;&#123;&#123; label &#125;&#125;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&#x2F;&#x2F; childComp.vue&lt;template&gt;    &lt;div class&#x3D;&quot;demoChild&quot;&gt;        &lt;button @click&#x3D;&quot;$emit(&#39;update:label&#39;,&#39;修改父组件的label&#39;)&quot;&gt;            修改        &lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>当点击childComp.vue的button时,父组件的label则会改为 <em>修改父组件的label</em></p></blockquote></li></ol><blockquote><p>值的注意的是,vue3.0已经将<code>.sync</code>修饰符移除,与<code>v-model</code>进行了一个融合<br> <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/sync.png" alt=".sync修饰符3.0移除">  </p></blockquote></li></ul><h3 id="事件的修饰符"><a href="#事件的修饰符" class="headerlink" title="事件的修饰符"></a>事件的修饰符</h3><p>简介: 针对事件行为设计的修饰符,比如<code>stopPropagation()[阻止冒泡]</code>,<code>preventDefault()[阻止默认行为]</code>等等…</p><ul><li>stop –&gt; event.stopPropagation()阻止事件冒泡<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 阻止单击事件冒泡，当点击box2时就不会触发box1的点击事件，若不加则会触发 --&gt;&lt;div class&#x3D;&quot;box1&quot; @click&#x3D;&quot;btn&quot;&gt;&lt;div class&#x3D;&quot;box2&quot; @click.stop&#x3D;&quot;btn1&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li>prevent -&gt; event.preventDefault(),阻止事件默认行为<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li>capture –&gt; 来实现捕获触发事件的机制<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 添加事件侦听器时使用事件捕获模式，先执行外层盒子事件，再执行里面盒子事件 --&gt;&lt;div v-on:click.capture&#x3D;&quot;toDo&quot;&gt;...&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li>self –&gt; 实现只有点击当前元素时候，才会触发事件处理函数（只会阻止自己身上的冒泡行为，并不会阻止真正的冒泡）<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 只当事件在该元素本身（而不是子元素）才去执行 --&gt;&lt;div v-on:click.self&#x3D;&quot;toDo&quot;&gt;...&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li>once –&gt; 只触发一次处理函数<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;button v-on:click.once&#x3D;&quot;toDo&quot;&gt;&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li>passive –&gt; 对应 addEventListener 中的 passive 选项；表示它不会阻止事件的默认行为(通常来说，滚动页面的默认行为被阻止了，页面必须静止不动，但浏览器无法预先知道一个监听器会不会调用 preventDefault(),只有等滚动监听器执行完再去执行默认行为，而监听器执行是要耗时的，而且80%的滚动监听器是不会阻止默认行为的，所以浏览器白等，passive 监听器诞生了，可以在两个线程里同时执行监听器中的 JavaScript 代码和浏览器的默认行为了。）<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;&lt;!-- 而不会等待 &#96;onScroll&#96; 完成  --&gt;&lt;!-- 这其中包含 &#96;event.preventDefault()&#96; 的情况 --&gt;&lt;div v-on:scroll.passive&#x3D;&quot;onScroll&quot;&gt;...&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p><strong>.passive 修饰符尤其能够提升移动端的性能</strong><br>不要把 <code>.passive</code>和<code>.prevent</code>一起使用,因为<code>.prevent</code>将会被忽略，同时浏览器可能会向你展示一个警告。<code>passive</code>会告诉浏览器你不想阻止事件的默认行为</p></blockquote></li><li>事件修饰符的小技巧<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 修饰符可以串联，阻止默认事件  --&gt;&lt;a v-on:click.stop.prevent&#x3D;&quot;toDo&quot;&gt;&lt;&#x2F;a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h3 id="按键的修饰符"><a href="#按键的修饰符" class="headerlink" title="按键的修饰符"></a>按键的修饰符</h3><p>简介:通过键盘或鼠标的按键指定事件的触发方法(由于keyCode在Vue3.0废弃并且在一些高版本浏览器不支持,本文对keyCode形式的不作介绍)</p><ul><li>enter 回车键</li><li>tab</li><li>delete (捕获 “删除” 和 “退格” 键)</li><li>esc</li><li>space</li><li>up</li><li>down</li><li>left  (如果是鼠标就是左键)</li><li>right (如果是鼠标就是右键)</li><li>ctrl</li><li>alt</li><li>shift</li><li>meta  (MIT计算机键盘上的的一个特殊键)</li><li>middle(鼠标的中间滚轮键)</li></ul><blockquote><p>示例:<br>    <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 按下回车键触发search方法&lt;input type&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;search&quot; &#x2F;&gt;&#x2F;&#x2F; 按下鼠标中间滚轮键触发search方法&lt;button v-on:cilck.middle&#x3D;&quot;search&quot;&gt; 查找 &lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></blockquote><h3 id="补充的修饰符"><a href="#补充的修饰符" class="headerlink" title="补充的修饰符"></a>补充的修饰符</h3><p>简介: 介绍了<code>.exact</code>修饰符和<code>.native</code>修饰符</p><ul><li>.exact修饰符<blockquote><p>作用: 精准的控制触发事件的按钮</p>  <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 只有按下enter键才可以触发search方法,如果同时按下 alt + enter 键,则不会触发&lt;input type&#x3D;&quot;text&quot; v-on:keyup.enter.exact&#x3D;&quot;search&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></blockquote></li><li>.native修饰符<blockquote><p>作用: 将原生事件绑定到组件,组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件</p>  <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;*     常用于一个纯icon组件,进行一个事件的绑定*&#x2F;&lt;template&gt;    &lt;comp @click.native&#x3D;&quot;consoleDetails&quot; &#x2F;&gt;&lt;&#x2F;template&gt;comp.vue    &lt;div&gt;        &lt;img src&#x3D;&quot;xxx&quot;&gt;    &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>值的注意: 在vue3.0中,将<code>.native</code>修饰符也进行了废弃,如果需要达到<code>.native</code>的修饰符的方法则不能将绑定在组件标签上的方法注册进<code>emits</code>选项中(或者<code>defineEmits([])</code>)</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue2</tag>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的基础搭建</title>
    <link href="/2021/11/18/hexo/hexoCreate/"/>
    <url>/2021/11/18/hexo/hexoCreate/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><ul><li>风一般的速度<br>Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 </li><li>流畅的撰写<br>支持GitHub Flavored Markdown和所有Octopress的插件。 </li><li>扩展性<br>Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less.</li></ul><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><ul><li>所需环境<ul><li><a href="http://nodejs.cn/api/" title="Nodejsの中文镜像网站">Node.js</a></li><li><a href="https://git-scm.com/" title="git官网">git</a></li></ul></li><li>所需工具<ul><li><a href="https://github.com/" title="最大的同性交友网站">github</a></li><li><a href="https://hexo.io/zh-cn/" title="hexo中文官网">hexo</a></li></ul></li></ul><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket.png" />  <font size=5 face='微软雅黑' color="#1f87dd" style="font-weight:700;"> fist-step </font></div><ul class="nano-ul-flex">  <li>    <div >安装hexo脚手架</div>    <div class="nano-pointer">npm install -g hexo-cli</div>    <hr />  </li>   <li>    <div >初始化hexo文件夹</div>    <div class="nano-pointer">hexo init (初始化hexo)</div>    <div class="nano-pointer">npm install</div>    <hr />    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-step1.png"/>    <div class="nano-tips"><span>Tips:</span> 如果出现报错,一般都是node版本过低导致,升级一下node版本就可以了(博主的node版本是v14.18.1)</div>    <hr />  </li>  <li>    <div >本地启动hexo</div>    <div class="nano-pointer">hexo g (生成hexo)</div>    <div class="nano-pointer">hexo s (启动本地服务器,这一步之后就可以通过http://localhost:4000 查看)</div>    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-step2.png"/>    <div>&nbsp;</div>    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-step3.png"/>    <div class="nano-success">    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    这样就暂时先完成了本地博客的环境搭建啦~</div>    <div class="nano-tips"><span>Tips:</span> 如果出现端口占用问题可以输入      <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer">hexo s -p 41</font>      暂时切换端口    </div>    <hr />  </li></ul> <div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket.png">  <font size=5 face='微软雅黑' color="#1f87dd" style="font-weight:700;"> twice-step </font></div><ul class="nano-ul-flex">  <li>    <a href="https://github.com/">创建github账号</a>  </li>  <li>   <span>创建一个新的github仓库</span>   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/github-create-1.png" />   <hr />   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/github-create-2.png" />    <hr />    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/github-create-3.png" />    <div class="nano-success">      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    这样就完成了github的环境配置了~</div>  </li></ul><div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket.png" />  <font size=5 face='微软雅黑' color="#1f87dd" style="font-weight:700;"> third-step </font></div><ul class="nano-ul-flex">  <li>    <div >配置本地hexo部署到GitHub的文件</div>    <div>      编辑根目录下_config.yml文件,查找并切换到deploy字段位置,如图进行编辑:    </div>    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/push-hexo1.png" />    <div class="nano-pd">      保存后安装扩展: <span class="nano-pointer">npm install hexo-deployer-git --save </span>      </div>    <div class="nano-tips"><span>Tips:</span> hexo的语法规定 <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> : </font>后面      <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer">必须有一个空格</font>    </div>    <hr />  </li>  <li>    <div >配置SSH Key 到GitHub</div>    <div>      <div>在Git Bash中输入: <span class="nano-pointer">ssh-keygen -t rsa -C "你的github邮箱号" </span> </div>      <div>之后按三下回车出现以下内容</div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-1.png" />    </div>    <hr />    <div>      <div>找到.ssh文件夹，并打开其中的id_rsa.pub文件，复制里面的内容</div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-2.png" />    </div>    <hr />    <div>      <div>之后按下面图片步骤执行</div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-3.png" />      <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-4.png" />       <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-5.png" />      <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-6.png" />      <hr/>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-7.png" />      <hr/>      <div>此时在git bush中输入 <span class="nano-pointer">ssh -T git@github.com<span></div>      <img  src="https://gitee.com/roily/nano-piture-bed/raw/master/img/ssh-key-8.png" />      <div class="nano-success">      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    如果出现了以上语句,则说明设置成功~</div>    </div>    <hr />  </li>   <li>    <div >推送本地hexo 到GitHub</div>    <div>      <div>在Git Bash中设置用户信息:</div>      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-1.png" />      <hr />      <div>编辑根目录下_config.yml文件,查找并切换到url字段位置,如图进行编辑:</div>      <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-2.png" />      <div class="nano-tips"><span>Tips:</span>  <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> 配置之后,初次上传就可以有样式了~ </font>      </div>      <hr />    </div>  </li></ul> <h2 id="搭建完成"><a href="#搭建完成" class="headerlink" title="搭建完成"></a>搭建完成</h2><div class="flex-start nano-flex-start-align-end ">   <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/rocket-succes.png" />  <font size=5 face='微软雅黑' color="red" style="font-weight:700;"> last-step </font></div><ul class="nano-ul-flex">  <li>    输入 <span class="nano-pointer">hexo d</span> 指令推送到远端    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-5.png">    <div class="nano-tips"><span>Tips:</span>  <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> 网络原因可能会推送不成功,多试几下就好了~ </font>    </div>    <hr />  </li>   <li>    推送成功!    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-3.png">    <hr />    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/hexo-to-push-7.jpg">     <div class="nano-tips"><span>Tips:</span>  <font size=4 face='微软雅黑' color="#1f87dd" style="font-weight:700;" class="nano-pointer"> 因为picGo一直推不上去pc端的界面截图,所以展示了移动端的效果~ </font>    </div>     <hr />  </li>  <div class="nano-success">    <img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/success-new.png" />    这样就完成了博客的搭建与上传~</div></ul> <h2 id="最后の一些话"><a href="#最后の一些话" class="headerlink" title="最后の一些话"></a>最后の一些话</h2><ul><li><p>附上一些其它常用指令 <br/></p><img src="https://gitee.com/roily/nano-piture-bed/raw/master/img/instruct-hexo.png" /></li><li><p>其它念叨 <br/></p><ul><li>之后也会陆续推出使用picgo搭配gitee做的图床教程,主要是为了减少静态资源的体积,本文的所有图片均来自gitee创建的图床~</li><li>一开始不用gitee而选择github的原因是因为gitee的pages服务需要人工审核,审了我蛮久的,github不需要审核,就是需要科学上网,所以gitee也是可以做博客的,有兴趣的同学可以自己尝试一下~</li><li>hexo还有主题这些,后面也会出一些教程,毕竟我也才开始弄hexo,也不是很会,可能只会写一些很浅显的东西- -</li><li>纪念第一篇博文,完结撒花,我去推了 2021-11-26</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
